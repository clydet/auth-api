# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-java-maven # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: java8

# you can overwrite defaults here
#  stage: dev
#  region: us-east-1

# you can add statements to the Lambda function's IAM Role here
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1
plugins:
  - serverless-aws-documentation


# you can add packaging information here
package:
  artifact: target/hcqis-auth-dev.jar

# These are our API models for swagger
custom:
  client:
    bucketName: paas-serverless-${opt:stage}-swagger-ui
    distributionFolder: build/swagger-ui
  documentation:
    models:
      -
        name: "Registration"
        description: "This is a registration"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            user:
              type: "string"
              required: true
            emailAddress:
              type: "string"
              required: true
            activationDate:
              type: "string"
              required: true
            duration:
              type: "integer"
              required: true
            mfaDeviceId:
              type: "string"
              required: false
      -
        name: "RegistryError"
        description: "This is an registry error"
        contentType: "application/json"
        schema:
          type: "object"
          properties:
            errorMessage:
              type: "string"
              

functions:
  register:
    handler: org.hcqis.RegistryHandler
    role: ${env:LAMBDA_EXECUTION_ROLEARN}
    events:
      - http:
          path: /v1/registry
          method: put
          cors: true
          private: true
          documentation:
            summary: "Register for an authentication jwt"
            description: "Register for an authentication jwt"
            tags:
              - "Registry"
            requestBody:
              description: "The registry details, namely a user id and an email address where a presigned url will be sent for jwt delivery"
            requestModels:
              "application/json": "Registry"
            methodResponses:
              -
                statusCode: "200"
                responseBody:
                  description: "The registry metadata"
                responseModels:
                  "application/json": "Registry"
              -
                statusCode: "400"
                responseModels:
                  "application/json": "RegistryError"
  registerMfa:
    handler: org.hcqis.MfaRegistryHandler
    role: ${env:LAMBDA_EXECUTION_ROLEARN}

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"

resources:
  Resources:
    lambdakey:
      Type: AWS::KMS::Key
      Properties:
        AliasName: "mfa-api-kms"
        Description: "KMS key for the mfa api"
        Enabled: true
        KeyPolicy: 
          Version: "2012-10-17"
          Id: "mfa-api-key-lambda-1"
          Statement: 
            Sid: "Allow administration of the key"
            Effect: "Allow"
            Principal: 
              AWS: "${env:LAMBDA_ROLE_ARN}"
            Action: 
              - "kms:Create*"
              - "kms:Describe*"
              - "kms:Enable*"
              - "kms:List*"
              - "kms:Put*"
              - "kms:Update*"
              - "kms:Revoke*"
              - "kms:Disable*"
              - "kms:Get*"
              - "kms:Delete*"
              - "kms:ScheduleKeyDeletion"
              - "kms:CancelKeyDeletion"
            Resource: "*"
